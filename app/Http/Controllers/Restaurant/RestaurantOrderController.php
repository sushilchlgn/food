<?php

namespace App\Http\Controllers\Restaurant; // <--- Ensure this is correct

use App\Http\Controllers\Controller;
use App\Models\Order;
use App\Models\Restaurant; // If needed to get restaurant context, though usually via Auth::user()->restaurant
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class RestaurantOrderController extends Controller
{
    /**
     * Display a listing of the resource (orders for the restaurant).
     */
    public function index()
    {
        $user = Auth::user();
        $restaurant = $user->restaurant; // Assuming User has a 'restaurant' relationship

        if (!$restaurant) {
            return redirect()->route('restaurant.dashboard')->with('error', 'You do not have a restaurant configured.');
        }

        // Fetch orders for this specific restaurant
        $orders = Order::where('restaurant_id', $restaurant->id)
                       ->with('customer') // Eager load the customer who placed the order
                       ->latest() // Show newest orders first
                       ->paginate(15);

        return view('restaurant.orders.index', compact('orders', 'restaurant'));
    }

    /**
     * Display the specified resource (a specific order).
     */
    public function show(Order $order) // Route model binding
    {
        // Authorize: Ensure this order belongs to the authenticated owner's restaurant
        $this->authorizeOrderAccess($order);
        $restaurant = Auth::user()->restaurant;
        $order->load('items.menuItem', 'customer'); // Eager load order items, their menu item details, and customer

        return view('restaurant.orders.show', compact('order', 'restaurant'));
    }

    /**
     * Update the status of the specified order.
     */
    public function updateStatus(Request $request, Order $order)
    {
        $this->authorizeOrderAccess($order);

        $request->validate([
            'status' => 'required|string|in:pending,confirmed,preparing,out_for_delivery,delivered,cancelled_by_restaurant',
        ]);

        $order->status = $request->status;
        $order->save();

        // Optionally, send notifications to customer
        // if ($request->status === 'confirmed') { Mail::to($order->customer->email)->send(...); }
        // etc.

        return redirect()->route('restaurant.orders.show', $order->id)
                         ->with('success', 'Order status updated successfully.');
    }

    /**
     * Helper method to authorize access to an order.
     */
    private function authorizeOrderAccess(Order $order)
    {
        $userRestaurantId = Auth::user()->restaurant->id ?? null;
        if ($order->restaurant_id !== $userRestaurantId) {
            abort(403, 'Unauthorized action. This order does not belong to your restaurant.');
        }
    }

    // You might not need create, store, edit, update (for the whole order), or destroy methods
    // for the restaurant owner, as orders are created by customers.
    // You can remove them if they were generated by --resource.
}